{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePersentage","FEEDBACK_OPTIONS","App","useState","feedbacks","setStatistics","option","countTotalFeedback","Object","values","reduce","amount","keys","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNASeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCWQC,EAbS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,wBAAQC,KAAK,SAASC,QAAS,kBAAMF,EAAgBD,IAArD,SACGA,KCGQI,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCwB3BC,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAiB,IAAVD,EACL,cAAC,EAAD,CAAcL,QAAQ,sBAEtB,+BACE,wCAAWE,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCPAC,EAAmB,CACvBL,KAAM,EACNC,QAAS,EACTC,IAAK,GA2CQI,MAxCf,WAAgB,IAAD,EACsBC,mBAAS,eAAKF,IADpC,mBACNG,EADM,KACKC,EADL,KAGb,SAASf,EAAgBgB,GACvBD,EAAc,2BAAKD,GAAN,kBAAkBE,EAASF,EAAUE,GAAU,KAG9D,SAASC,IACP,OAAOC,OAAOC,OAAOL,GAAWM,QAC9B,SAACX,EAAOY,GAAR,OAAmBZ,EAAQY,IAC3B,GAVS,MAkBgBH,OAAOI,KAAKR,GAlB5B,mBAkBNR,EAlBM,KAkBAC,EAlBA,KAkBSC,EAlBT,KAoBb,OACE,qCACE,eAAC,EAAD,CAASZ,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBG,QAASO,EAAMN,gBAAiBA,IACjD,cAAC,EAAD,CAAiBD,QAASQ,EAASP,gBAAiBA,IACpD,cAAC,EAAD,CAAiBD,QAASS,EAAKR,gBAAiBA,OAElD,cAAC,EAAD,CAASJ,MAAM,aAAf,SACE,cAAC,EAAD,CACEU,KAAMQ,EAAUR,KAChBC,QAASO,EAAUP,QACnBC,IAAKM,EAAUN,IACfC,MAAOQ,IACPP,mBAlBCa,KAAKC,MAAOV,EAAUR,KAAOW,IAAwB,aCvBhEQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b722a51e.chunk.js","sourcesContent":["const Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <button type=\"button\" onClick={() => onLeaveFeedback(options)}>\r\n      {options}\r\n    </button>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.string.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\n\r\nimport Notification from \"../Notification/Notification\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePersentage }) => {\r\n  return total === 0 ? (\r\n    <Notification message=\"No feedback given\" />\r\n  ) : (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePersentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import { useState } from \"react\";\n\nimport Section from \"./components/Section/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\n\nconst FEEDBACK_OPTIONS = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nfunction App() {\n  const [feedbacks, setStatistics] = useState({ ...FEEDBACK_OPTIONS });\n\n  function onLeaveFeedback(option) {\n    setStatistics({ ...feedbacks, [option]: feedbacks[option] + 1 });\n  }\n\n  function countTotalFeedback() {\n    return Object.values(feedbacks).reduce(\n      (total, amount) => total + amount,\n      0\n    );\n  }\n\n  function countPositiveFeedbackPercentage() {\n    return Math.round((feedbacks.good / countTotalFeedback()) * 100);\n  }\n\n  const [good, neutral, bad] = Object.keys(feedbacks);\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={good} onLeaveFeedback={onLeaveFeedback} />\n        <FeedbackOptions options={neutral} onLeaveFeedback={onLeaveFeedback} />\n        <FeedbackOptions options={bad} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={feedbacks.good}\n          neutral={feedbacks.neutral}\n          bad={feedbacks.bad}\n          total={countTotalFeedback()}\n          positivePersentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}